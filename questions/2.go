package main

import "fmt"

//В языке программирования Go интерфейсы представляют собой соглашение о том, какие методы должны быть реализованы
//для конкретного типа данных. Они определяют набор методов, которые должен реализовать конкретный тип данных,
//чтобы быть считаемым реализацией этого интерфейса. Интерфейсы в Go очень гибкие и могут быть использованы
//для достижения полиморфизма, что позволяет писать более гибкий и модульный код.

// В Go утиная типизация

type Animal interface {
	Speak() string
}

type Dog struct{}

func (d Dog) Speak() string {
	return "Woof!"
}

type Cat struct{}

func (c Cat) Speak() string {
	return "Meow!"
}

//Интерфейсы в Go используются для создания абстракций и обобщений. Они позволяют писать гибкий код, который может
//работать с различными типами данных, не завися от конкретной реализации. Например, если у нас есть функция, которая
//принимает аргумент типа `Animal`, она может быть вызвана с любым типом, реализующим интерфейс `Animal`,
//будь то `Dog`, `Cat` или другой тип.

func main() {
	data := []Animal{Cat{}, Dog{}}
	for _, animal := range data {
		fmt.Println(animal.Speak())
	}
}
