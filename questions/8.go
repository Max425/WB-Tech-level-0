package main

//make:
//Оператор make используется для создания срезов, карт (map) и каналов (channel) в Go.
//Синтаксис: make(T, args...), где T - тип создаваемого объекта (срез, карта или канал), а args... -
//дополнительные аргументы, специфичные для типа.
//Оператор make возвращает инициализированный и готовый к использованию объект (срез, карту или канал),
//готовый к работе с соответствующими операциями, например, добавлением элементов в карту или отправкой
//и получением значений из канала.

//new:
//Оператор new используется для выделения памяти для нового объекта и возвращает указатель на выделенную память.
//Синтаксис: new(T), где T - тип объекта, для которого нужно выделить память.
//Оператор new возвращает указатель на нулевое значение типа T,
//т.е. объект, который был нулевым (пустым) на момент создания.

import "fmt"

func main() {
	slice := make([]int, 5)
	m := make(map[string]int)
	ch := make(chan int)

	fmt.Printf("%v %v %v\n", slice, m, ch)

	ptr := new(int)
	fmt.Printf("%v", ptr)
}

//основное различие между make и new заключается в том, что make используется для создания и инициализации
//объектов, которые требуют инициализации (срезы, карты, каналы), а new используется для выделения памяти
//для новых объектов и возвращает указатель на выделенную память.
